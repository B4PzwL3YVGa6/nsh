$nsh: TODO,v 1.16 2005/05/31 07:57:29 chris Exp $

nsh is a work in progress, future versions will be released which
implement much of the following (of course, diffs are welcome):

Cleanup:

* Formatting for the manual.  Something that looks slick in PDF and print.
* Restructure, rewrite a few things, etc..
* Check more errno values in various places for common mistakes and print out
  the error in "plain english" instead of kernel/library jargon
* More security auditing for string handling, off-by-one errors, data
  passed to kernel, data passed elsewhere...
* Maybe user args should be set to lowercase at early so that we dont have to
  use strcasecmp/strncasecmp everywhere?
* User args should be sanity checked early on
* Consistency in how we print errors for commands called from interface(),
  give user-friendly messages, as these errors generally represent user
  error (whereas an error in conf() or other things that are not called
  direct from CLI generally represent problems in nsh, or strange user
  alterations of the conf file)
* Consistency in how errors are returned, handled between functions

To be implemented:

* pfsync syncpeer
* if description
* Newer 802.11 gunk like txpower, bssid, whatever else
* kernel pppoe
* carp carpdev
* handle TDM timeslots
* lladdr
* trunk
* View other users logged in, clear their sessions, etc...
* Interface wtth bgpd and ospfd
* Configure IPsec VPNs with simple CLI commands (The easiest way to do this 
  would be to use a conf-less isakmpd with certificates and ipsecadm flows)
* IPComp
* DHCP daemon control
* Do we build in a simple ping, traceroute or just shell out for these??
* And what about telnet/ssh (maybe shell out for ssh, implement a simple
  telnet?)
* Persistent comments/remarks in the config file (to document routes, etc..)
  or at least interface descriptions

Lower priority:

* IPv6?? (shouldn't be hard, considering that most of the functions
  we stole from other source already support it)
* IPX?? AppleTalk??

Would be nice:

* Perhaps some way for the shell to upgrade itself, or the entire system/
  flash image when given a network source for new binaries?
* Build a web interface that works through the rc file handler
* Turn pfctl into a library and use it directly
* Separate the user interface from the kernel interface so that nsh doesn't
  need to be run as root, maybe this would allow us to run an nsh daemon
  in the background that could persistently keep other information which the
  kernel doesn't store itself. 
* Add more diagnostic messages for verbose output where useful
* Can we hook into snmpd at all or just run it separately on the same box?
* Support for paging through displays of text X lines at a time
* Something comparable to "| inc" from cisco-land
* Tab command/argument completion
* Context-sensitive help
* Import unimplemented wicontrol features
* And what about sbecontrol?
* Convenient/automatic mechanisms to centralize configurations for
  tracking/revision control
* Get rid of routepr.c and use sysctl-based functions instead while still
  displaying all that tasty info
* While there, split out arp/route show

Known Bugs (or, things that I don't want to bother with right now, but
better not forget later...):

* The kernel does not keep count of information displayed in 'show rtstat'
  properly (what else??)
* ALTQTBRSET was removed from the kernel with the migration to pf.  But,
  there is no equivalent.  Fix this.
* ...
