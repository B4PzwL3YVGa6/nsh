nsh//network config shell//Chris Cappuccio <chris@dqc.org> version 20070117
$nsh: README,v 1.22 2007/01/17 09:57:18 chris Exp $

A CLI intended for OpenBSD-based routers running little except for sshd,
targeted towards flash-based systems.

The idea is to allow simple, quick management of a router *without*
requiring the user to be familiar with ifconfig, route, netstat, pfctl,
and the various configuration files in /etc which are otherwise required to
manage this type of router (In fact, we eliminate the use of those
commands and /etc configuration files entirely!).  In conjunction with the
OpenBSD kernel, sshd, and maybe snmpd you have a fully functioning system.

(nsh is BSD-licensed, with much code re-used from OpenBSD userland)

nsh handles the following functions:

* Gives the user a command-line interface to:
  + Add/delete/show/flush/monitor IP routes
  + Display detailed information regarding an interface
  + Configure interfaces for IP, MTU, VLAN, media, ...
  + Show host (IP, TCP, UDP) and router statistics
  + Configure PF/NAT/ALTQ system-wide
  + Configure bridge for members, rules
  + Save the current routes, bridge, interface configs to a file
* Comes with a full manual (30%)
* This shell replaces most of /etc/rc, /etc/netstart on an embedded system.
  Simply started as nsh -i, it will read the previously saved configuration
  and execute it on the system.
* Nsh can start as a user shell from ssh, or console.  Allows privileged user
  to escape to bourne shell (for now anyways..)

>> Contributors:
   * Jose Nazario <jose@monkey.org> contributed command functions from the
     OpenSoekris project for reboot, shutdown, writing the config out, 
     and some fixes to the config generator. 
   * Christian Gut contributed password save functions.
   * Mats Mellstrand <mats@exmandato.se> contributed dhclient functionality
   * Manuel Pata <pata@alface.de> contributed various bits of cleanup,
     and new commands for lladdr, carp, trunk and txpower

>> See TODO for details on implementation status and future ideas.

>> Why a Cisco-like interface? Why bother to use OpenBSD for routers?

At the edge, I expect that people will find OpenBSD to be very useful,
especially in conjunction with software like NSH.  OpenBSD is an excellent
low-cost, high-quality alternative to closed, proprietary, expensive equipment
from various vendors. OpenBSD's features such as IPsec-encapsulated ethernet
bridging, IPsec itself, IPComp, highly extensible packet filter and network
address translation, and 802.11 access-point mode, among many others, are
excellent tools to get more security, speed, and efficiency out of your
network.  You can create a wide range of appliances with these tools as well.

OpenBSD has long been the de-facto standard for cryptographic security,
with a reference standard IPsec implementation used by a consortium
comprised of all the major router vendors (vpnc.org). New IPsec products
from Cisco, Nortel, Juniper, Microsoft, Wind River, PGP, SSH Communications,
F-Secure, and many others are tested against OpenBSD IPsec and KAME IPsec,
the consortium's reference standards.  Likewise, OpenBSD's OpenSSH comes on
Cisco routers, HP switches, MacOS X, IBM's AIX, and Sun Solaris, not to
mention just about every free OS out there!  OpenBSD was the first free OS to
include full source code for a cryptographic hardware accelerator driver and
the first to fully implement it with IPsec.

I like interfaces that are clean, simple, and work as expected.  I know
how to use OpenBSD's userland to configure the kernel, and no matter how long
I use it, I still find it is easier to create problems with than on a Cisco.
A Cisco gives me the minimal information that is necessary, unless I ask for
more.  It hides implementation details.  There are lots of reasons why 
this is bad.  Everyone should learn to use the full suite of network tools
in the OpenBSD userland.  

Despite the benefits, when I am on the phone with a customer, or when
I am scrambling to get home, it can be faster to get the job done with a
minimalist interface.  It is easier to show someone the whole router
configuration when it is all condensed into a uniform listing.  It
is easier to manage that listing if I want to host it on a central server.
(Of course, not in all cases is the Cisco-style faster for me, I hate
Cisco access-lists, pf.conf and bgpd.conf are clear winners)

Last, but not least, people tend to find the userland tools confusing.
People who do not use OpenBSD in an administrative capacity (professional
or hobbyist) often have little interest in overcoming this obstacle.
Anyone who deploys routers based on Unix-like software in an organization
where most networking folks are trained with Cisco routers knows about
the resistance and training hassles there.

A lot of people have been using OpenBSD at the edge for functionality and
security capabilities beyond those found in typical routers and firewalls.
I hope NSH can help more people use it.
